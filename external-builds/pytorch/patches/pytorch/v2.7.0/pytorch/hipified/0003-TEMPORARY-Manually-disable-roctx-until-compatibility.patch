From 8f8d7e793521f20e5bb48ef9ee7f288c777489b1 Mon Sep 17 00:00:00 2001
From: Stella Laurenzo <stellaraccident@gmail.com>
Date: Mon, 31 Mar 2025 18:54:56 +0100
Subject: [PATCH 03/14] TEMPORARY: Manually disable roctx until compatibility
 with rocprofv3 is established.

---
 torch/csrc/cuda/shared/nvtx.cpp    | 21 +++++++++++++--------
 torch/csrc/profiler/stubs/cuda.cpp | 11 ++++++++---
 2 files changed, 21 insertions(+), 11 deletions(-)

diff --git a/torch/csrc/cuda/shared/nvtx.cpp b/torch/csrc/cuda/shared/nvtx.cpp
index 40e9821389..0ce2dd34b5 100644
--- a/torch/csrc/cuda/shared/nvtx.cpp
+++ b/torch/csrc/cuda/shared/nvtx.cpp
@@ -1,13 +1,14 @@
 #ifdef _WIN32
 #include <wchar.h> // _wgetenv for nvtx
 #endif
-
 #ifndef ROCM_ON_WINDOWS
+/* TODO: Enable when rocprofv3 compat is available.
 #ifdef TORCH_CUDA_USE_NVTX3
 #include <roctracer/roctx.h>
 #else // TORCH_CUDA_USE_NVTX3
 #include <roctracer/roctx.h>
 #endif // TORCH_CUDA_USE_NVTX3
+*/
 #else // ROCM_ON_WINDOWS
 #include <c10/util/Exception.h>
 #endif // ROCM_ON_WINDOWS
@@ -25,7 +26,9 @@ struct RangeHandle {
 
 static void device_callback_range_end(void* userData) {
   RangeHandle* handle = ((RangeHandle*)userData);
-  roctxRangeStop(handle->id);
+  // TODO: Enable when rocprofv3 compat is available.
+  // handle->id = roctxRangeStartA(handle->msg);
+  //roctxRangeStop(handle->id);
   free((void*)handle->msg);
   free((void*)handle);
 }
@@ -37,7 +40,9 @@ static void device_nvtxRangeEnd(void* handle, std::intptr_t stream) {
 
 static void device_callback_range_start(void* userData) {
   RangeHandle* handle = ((RangeHandle*)userData);
-  handle->id = roctxRangeStartA(handle->msg);
+  // TODO: Enable when rocprofv3 compat is available.
+  //handle->id = roctxRangeStartA(handle->msg);
+  handle->id = 0;
 }
 
 static void* device_nvtxRangeStart(const char* msg, std::intptr_t stream) {
@@ -59,11 +64,11 @@ void initNvtxBindings(PyObject* module) {
 #else
   auto nvtx = m.def_submodule("_nvtx", "libNvToolsExt.so bindings");
 #endif
-  nvtx.def("rangePushA", roctxRangePushA);
-  nvtx.def("rangePop", roctxRangePop);
-  nvtx.def("rangeStartA", roctxRangeStartA);
-  nvtx.def("rangeEnd", roctxRangeStop);
-  nvtx.def("markA", roctxMarkA);
+  nvtx.def("rangePushA", [](const char*) {} /*roctxRangePushA*/);
+  nvtx.def("rangePop", []() { } /*roctxRangePop*/);
+  nvtx.def("rangeStartA", [](const char*) { return 0; }/*roctxRangeStartA*/);
+  nvtx.def("rangeEnd", []() {}/*roctxRangeStop*/);
+  nvtx.def("markA", [](const char*) {}/*roctxMarkA */);
   nvtx.def("deviceRangeStart", device_nvtxRangeStart);
   nvtx.def("deviceRangeEnd", device_nvtxRangeEnd);
 }
diff --git a/torch/csrc/profiler/stubs/cuda.cpp b/torch/csrc/profiler/stubs/cuda.cpp
index 37364dfc93..0ed35059a1 100644
--- a/torch/csrc/profiler/stubs/cuda.cpp
+++ b/torch/csrc/profiler/stubs/cuda.cpp
@@ -1,11 +1,13 @@
 #include <sstream>
 
 #ifndef ROCM_ON_WINDOWS
+/* TODO: Enable when rocprofv3 compat is in TheRock
 #ifdef TORCH_CUDA_USE_NVTX3
 #include <roctracer/roctx.h>
 #else
 #include <roctracer/roctx.h>
 #endif
+*/
 #else // ROCM_ON_WINDOWS
 #include <c10/util/Exception.h>
 #endif // ROCM_ON_WINDOWS
@@ -76,15 +78,18 @@ struct CUDAMethods : public ProfilerStubs {
 
 #ifndef ROCM_ON_WINDOWS
   void mark(const char* name) const override {
-    ::roctxMark(name);
+    // TODO: Enable when rocprofv3 compat is available.
+    // ::roctxMark(name);
   }
 
   void rangePush(const char* name) const override {
-    ::roctxRangePushA(name);
+    // TODO: Enable when rocprofv3 compat is available.
+    // ::roctxRangePushA(name);
   }
 
   void rangePop() const override {
-    ::roctxRangePop();
+    // TODO: Enable when rocprofv3 compat is available.
+    // ::roctxRangePop();
   }
 #else // ROCM_ON_WINDOWS
   static void printUnavailableWarning() {
-- 
2.47.1.windows.2

