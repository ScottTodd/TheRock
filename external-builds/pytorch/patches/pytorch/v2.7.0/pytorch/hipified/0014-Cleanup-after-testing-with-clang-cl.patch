From 142e98267ee910d7a10c5b3748a3ed3781f7ee33 Mon Sep 17 00:00:00 2001
From: Scott <scott.todd0@gmail.com>
Date: Thu, 15 May 2025 16:09:38 -0700
Subject: [PATCH 14/14] Cleanup after testing with clang-cl.

---
 CMakeLists.txt               |  4 ----
 aten/src/ATen/CMakeLists.txt |  6 ------
 c10/hip/HIPFunctions.h       |  5 -----
 caffe2/CMakeLists.txt        |  6 +-----
 cmake/Dependencies.cmake     | 11 ++++++-----
 cmake/public/LoadHIP.cmake   |  3 +--
 6 files changed, 8 insertions(+), 27 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b487784d54..6086450e3e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -891,10 +891,6 @@ if(USE_ROCM)
   if(UNIX AND (USE_FLASH_ATTENTION OR USE_MEM_EFF_ATTENTION))
     include(cmake/External/aotriton.cmake)
   endif()
-  if(WIN32)
-    string(APPEND CMAKE_CXX_FLAGS " -Wno-ignored-attributes -Wno-unknown-attributes")
-    string(APPEND CMAKE_CXX_FLAGS " -fms-extensions -fms-compatibility -D__HIP_ROCclr__=1")
-  endif()
 endif()
 
 if(DEBUG_CUDA)
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index 8d28717992..009859de63 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -382,12 +382,6 @@ endif()
     ${native_quantized_hip_hip}
     ${native_transformers_hip_hip} ${native_transformers_src_hip_hip}
   )
-  # if(WIN32) # Windows doesn't support Composable Kernels
-  #   file(GLOB native_hip_bgemm "native/hip/bgemm_kernels/*.hip")
-  #   file(GLOB native_hip_ck "native/hip/ck*.hip")
-  #   exclude(ATen_HIP_SRCS "${ATen_HIP_SRCS}"
-  #     ${native_hip_bgemm} ${native_hip_ck})
-  # endif()
   # TODO: Codegen separate files for HIP and use those (s/cuda_generated_sources/hip_generated_sources)
   list(APPEND all_hip_cpp
     ${native_nested_hip_cpp}
diff --git a/c10/hip/HIPFunctions.h b/c10/hip/HIPFunctions.h
index fdca74bbf7..97a8657550 100644
--- a/c10/hip/HIPFunctions.h
+++ b/c10/hip/HIPFunctions.h
@@ -69,11 +69,6 @@ class WarningState {
   SyncDebugMode sync_debug_mode = SyncDebugMode::L_DISABLED;
 };
 
-
-#ifdef _MSC_VER
-#define __inline__ __inline
-#endif
-
 C10_HIP_API __inline__ WarningState& warning_state() {
   static WarningState warning_state_;
   return warning_state_;
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 916bc827e6..e76e05c125 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -775,7 +775,7 @@ else()
   set(TORCH_HIP_LIB torch_hip)
   set(TORCH_XPU_LIB torch_xpu)
 endif()
- 
+
 
 if(NOT BUILD_LIBTORCHLESS)
 add_library(torch_cpu ${Caffe2_CPU_SRCS})
@@ -932,10 +932,6 @@ if(USE_ROCM)
     target_compile_definitions(torch_hip PRIVATE USE_NCCL)
   endif()
 
-  if(WIN32)
-    target_link_options(torch_hip PRIVATE "-fuse-ld=lld")
-  endif()
-
   if(USE_PRECOMPILED_HEADERS)
     target_precompile_headers(torch_hip PRIVATE
         "$<$<COMPILE_LANGUAGE:CXX>:ATen/core/ATen_pch.h>")
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 27fab45612..4f6b2e4837 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1052,11 +1052,9 @@ if(USE_ROCM)
     list(APPEND HIP_CXX_FLAGS -D__HIP_NO_HALF_OPERATORS__=1)
     list(APPEND HIP_CXX_FLAGS -D__HIP_NO_HALF_CONVERSIONS__=1)
     list(APPEND HIP_CXX_FLAGS -DTORCH_HIP_VERSION=${TORCH_HIP_VERSION})
-    if(NOT WIN32)
-      list(APPEND HIP_CXX_FLAGS -Wno-shift-count-negative)
-      list(APPEND HIP_CXX_FLAGS -Wno-shift-count-overflow)
-      list(APPEND HIP_CXX_FLAGS -Wno-duplicate-decl-specifier)
-    endif()
+    list(APPEND HIP_CXX_FLAGS -Wno-shift-count-negative)
+    list(APPEND HIP_CXX_FLAGS -Wno-shift-count-overflow)
+    list(APPEND HIP_CXX_FLAGS -Wno-duplicate-decl-specifier)
     list(APPEND HIP_CXX_FLAGS -DCAFFE2_USE_MIOPEN)
     list(APPEND HIP_CXX_FLAGS -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_HIP)
     list(APPEND HIP_CXX_FLAGS -std=c++17)
@@ -1067,6 +1065,9 @@ if(USE_ROCM)
     list(APPEND HIP_HIPCC_FLAGS --offload-compress)
     if(WIN32)
       add_definitions(-DROCM_ON_WINDOWS)
+      list(APPEND HIP_CXX_FLAGS -fms-extensions)
+      # Suppress warnings about dllexport.
+      list(APPEND HIP_CXX_FLAGS -Wno-ignored-attributes)
     endif()
     add_definitions(-DROCM_VERSION=${ROCM_VERSION_DEV_INT})
     add_definitions(-DTORCH_HIP_VERSION=${TORCH_HIP_VERSION})
diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index 5eadfd5168..d365971337 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -37,7 +37,7 @@ macro(pytorch_load_hip)
   message(STATUS "hiprtc version: ${hiprtc_VERSION}")
 
   # Original version made these UNIX-only.
-  if(NOT WIN32)
+  if(NOT WIN32)  # RCCL is not yet supported on Windows.
     find_package(rccl REQUIRED)
     message(STATUS "rccl version: ${rccl_VERSION}")
     find_package(hsa-runtime64 REQUIRED)
@@ -100,7 +100,6 @@ macro(pytorch_load_hip)
   # to most. If this mechanism ever breaks, the fix is to configure explicitly
   # with CMAKE_MODULE_PATH pointing at the directory in the ROCM SDK that
   # contains FindHIP.cmake.
-  
   function(find_rocm_sdk_module_path)
     set(hip_lib_dir "${hip_LIB_INSTALL_DIR}")
     foreach(candidate_path "${hip_lib_dir}/cmake" "${hip_lib_dir}/cmake/hip" "${hip_lib_dir}/../cmake")
-- 
2.47.1.windows.2

