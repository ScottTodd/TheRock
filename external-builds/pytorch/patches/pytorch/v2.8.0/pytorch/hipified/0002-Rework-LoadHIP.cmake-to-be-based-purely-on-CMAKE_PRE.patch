From 3564971e47ca65338bbf4254713b7b79de5cf9e0 Mon Sep 17 00:00:00 2001
From: Scott Todd <scott.todd0@gmail.com>
Date: Tue, 24 Jun 2025 16:12:55 -0700
Subject: [PATCH 2/2] Rework LoadHIP.cmake to be based purely on
 CMAKE_PREFIX_PATH.

* Eliminates dependence on `/opt/rocm` and path based heuristics.
* Normalizes package finding for Rocm 6.5+ layout.
* Workaround cmake >= 4.0 for hiprtc

Co-authored-by: Stella Laurenzo <stellaraccident@gmail.com>
Co-authored-by: Scott Tsai <scottt.tw@gmail.com>
Co-authored-by: Aaryaman Vasishta <jem456.vasishta@gmail.com>
---
 cmake/public/LoadHIP.cmake | 356 +++++++++++++------------------------
 1 file changed, 121 insertions(+), 235 deletions(-)

diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index cae0ca62f2..5ac8c39669 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -1,250 +1,136 @@
-set(PYTORCH_FOUND_HIP FALSE)
-
-# If ROCM_PATH is set, assume intention is to compile with
-# ROCm support and error out if the ROCM_PATH does not exist.
-# Else ROCM_PATH does not exist, assume a default of /opt/rocm
-# In the latter case, if /opt/rocm does not exist emit status
-# message and return.
-if(DEFINED ENV{ROCM_PATH})
-  set(ROCM_PATH $ENV{ROCM_PATH})
-  if(NOT EXISTS ${ROCM_PATH})
-    message(FATAL_ERROR
-      "ROCM_PATH environment variable is set to ${ROCM_PATH} but does not exist.\n"
-      "Set a valid ROCM_PATH or unset ROCM_PATH environment variable to fix.")
-  endif()
-else()
-  if(UNIX)
-    set(ROCM_PATH /opt/rocm)
-  else() # Win32
-    set(ROCM_PATH C:/opt/rocm)
-  endif()
-  if(NOT EXISTS ${ROCM_PATH})
-    message(STATUS
-        "ROCM_PATH environment variable is not set and ${ROCM_PATH} does not exist.\n"
-        "Building without ROCm support.")
-    return()
-  endif()
-endif()
-
-# MAGMA_HOME
-if(NOT DEFINED ENV{MAGMA_HOME})
-  set(MAGMA_HOME ${ROCM_PATH}/magma)
-  set(ENV{MAGMA_HOME} ${ROCM_PATH}/magma)
-else()
-  set(MAGMA_HOME $ENV{MAGMA_HOME})
-endif()
-
-# MIOpen isn't a part of HIP-SDK for Windows and hence, may have a different
-# installation directory.
-if(WIN32)
-  if(NOT DEFINED ENV{MIOPEN_PATH})
-    set(miopen_DIR C:/opt/miopen/lib/cmake/miopen)
-  else()
-    set(miopen_DIR $ENV{MIOPEN_PATH}/lib/cmake/miopen)
-  endif()
-endif()
-
-torch_hip_get_arch_list(PYTORCH_ROCM_ARCH)
-if(PYTORCH_ROCM_ARCH STREQUAL "")
-  message(FATAL_ERROR "No GPU arch specified for ROCm build. Please use PYTORCH_ROCM_ARCH environment variable to specify GPU archs to build for.")
-endif()
-message("Building PyTorch for GPU arch: ${PYTORCH_ROCM_ARCH}")
-
-# Add HIP to the CMAKE Module Path
-# needed because the find_package call to this module uses the Module mode search
-# https://cmake.org/cmake/help/latest/command/find_package.html#search-modes
-if(UNIX)
-  set(CMAKE_MODULE_PATH ${ROCM_PATH}/lib/cmake/hip ${CMAKE_MODULE_PATH})
-else() # Win32
-  set(CMAKE_MODULE_PATH ${ROCM_PATH}/cmake/ ${CMAKE_MODULE_PATH})
-endif()
-
-# Add ROCM_PATH to CMAKE_PREFIX_PATH, needed because the find_package
-# call to individual ROCM components uses the Config mode search
-list(APPEND CMAKE_PREFIX_PATH ${ROCM_PATH})
-
-macro(find_package_and_print_version PACKAGE_NAME)
-  find_package("${PACKAGE_NAME}" ${ARGN})
-  if(NOT ${PACKAGE_NAME}_FOUND)
-    message("Optional package ${PACKAGE_NAME} not found")
-  else()
-    message("${PACKAGE_NAME} VERSION: ${${PACKAGE_NAME}_VERSION}")
-    if(${PACKAGE_NAME}_INCLUDE_DIR)
-      list(APPEND ROCM_INCLUDE_DIRS ${${PACKAGE_NAME}_INCLUDE_DIR})
-    endif()
-  endif()
-endmacro()
-
-# Find the HIP Package
-# MODULE argument is added for clarity that CMake is searching
-# for FindHIP.cmake in Module mode
-find_package_and_print_version(HIP 1.0 MODULE)
-
-if(HIP_FOUND)
-  set(PYTORCH_FOUND_HIP TRUE)
-  find_package_and_print_version(hip REQUIRED CONFIG)
-
-  # The rocm-core package was only introduced in ROCm 6.4, so we make it optional.
-  find_package(rocm-core CONFIG)
-
-  # Some old consumer HIP SDKs do not distribute rocm_version.h, so we allow
-  # falling back to the hip version, which everyone should have.
-  # rocm_version.h lives in the rocm-core package and hip_version.h lives in the
-  # hip (lower-case) package. Both are probed above and will be in
-  # ROCM_INCLUDE_DIRS if available.
-  find_file(ROCM_VERSION_HEADER_PATH
-    NAMES rocm-core/rocm_version.h
-    NO_DEFAULT_PATH
-    PATHS ${ROCM_INCLUDE_DIRS}
-  )
-  set(ROCM_LIB_NAME "ROCM")
-  if(NOT ROCM_VERSION_HEADER_PATH)
-    find_file(ROCM_VERSION_HEADER_PATH
-      NAMES hip/hip_version.h
-      NO_DEFAULT_PATH
-      PATHS ${ROCM_INCLUDE_DIRS}
-    )
-    set(ROCM_LIB_NAME "HIP")
-  endif()
-  if(NOT ROCM_VERSION_HEADER_PATH)
-    message(FATAL_ERROR "Could not find hip/hip_version.h or rocm-core/rocm_version.h in ${ROCM_INCLUDE_DIRS}")
-  endif()
-  get_filename_component(ROCM_HEADER_NAME ${ROCM_VERSION_HEADER_PATH} NAME)
-
-  if(EXISTS ${ROCM_VERSION_HEADER_PATH})
-    set(ROCM_HEADER_FILE ${ROCM_VERSION_HEADER_PATH})
-  else()
-    message(FATAL_ERROR "********************* ${ROCM_HEADER_NAME} could not be found ******************\n")
-  endif()
-
-  # Read the ROCM headerfile into a variable
-  message(STATUS "Reading ROCM version from: ${ROCM_HEADER_FILE}")
-  message(STATUS "Content: ${ROCM_HEADER_CONTENT}")
-  file(READ "${ROCM_HEADER_FILE}" ROCM_HEADER_CONTENT)
-
-  # Below we use a RegEx to find ROCM version numbers.
-  # Note that CMake does not support \s for blank space. That is
-  # why in the regular expressions below we have a blank space in
-  # the square brackets.
-  # There are three steps:
-  # 1. Match regular expression
-  # 2. Strip the non-numerical part of the string
-  # 3. Strip leading and trailing spaces
-
-  string(REGEX MATCH "${ROCM_LIB_NAME}_VERSION_MAJOR[ ]+[0-9]+" TEMP1 ${ROCM_HEADER_CONTENT})
-  string(REPLACE "${ROCM_LIB_NAME}_VERSION_MAJOR" "" TEMP2 ${TEMP1})
-  string(STRIP ${TEMP2} ROCM_VERSION_DEV_MAJOR)
-  string(REGEX MATCH "${ROCM_LIB_NAME}_VERSION_MINOR[ ]+[0-9]+" TEMP1 ${ROCM_HEADER_CONTENT})
-  string(REPLACE "${ROCM_LIB_NAME}_VERSION_MINOR" "" TEMP2 ${TEMP1})
-  string(STRIP ${TEMP2} ROCM_VERSION_DEV_MINOR)
-  string(REGEX MATCH "${ROCM_LIB_NAME}_VERSION_PATCH[ ]+[0-9]+" TEMP1 ${ROCM_HEADER_CONTENT})
-  string(REPLACE "${ROCM_LIB_NAME}_VERSION_PATCH" "" TEMP2 ${TEMP1})
-  string(STRIP ${TEMP2} ROCM_VERSION_DEV_PATCH)
+macro(pytorch_load_hip)
+  find_package(hip REQUIRED CONFIG)
+  message(STATUS "hip version: ${hip_VERSION}")
+  find_package(amd_comgr REQUIRED)
+  message(STATUS "amd_comgr version: ${amd_comgr_VERSION}")
+  find_package(rocrand REQUIRED)
+  message(STATUS "rocrand version: ${rocrand_VERSION}")
+  find_package(hiprand REQUIRED)
+  message(STATUS "hiprand version: ${hiprand_VERSION}")
+  find_package(rocblas REQUIRED)
+  message(STATUS "rocblas version: ${rocblas_VERSION}")
+  find_package(hipblas REQUIRED)
+  message(STATUS "hipblas_VERSION: ${hipblas_VERSION}")
+  find_package(miopen REQUIRED)
+  message(STATUS "miopen version: ${miopen_VERSION}")
+  find_package(hipfft REQUIRED)
+  message(STATUS "hipfft version: ${hipfft_VERSION}")
+  find_package(hipsparse REQUIRED)
+  message(STATUS "hipsparse version: ${hipsparse_VERSION}")
+  find_package(rocprim REQUIRED)
+  message(STATUS "rocprim version: ${rocprim_VERSION}")
+  find_package(hipcub REQUIRED)
+  message(STATUS "hipcub version: ${hipcub_VERSION}")
+  find_package(rocthrust REQUIRED)
+  message(STATUS "rocthrust version: ${rocthrust_VERSION}")
+  find_package(hipsolver REQUIRED)
+  message(STATUS "hipsolver versio: ${hipsolver_VERSION}")
 
-  # Create ROCM_VERSION_DEV_INT which is later used as a preprocessor macros
-  set(ROCM_VERSION_DEV "${ROCM_VERSION_DEV_MAJOR}.${ROCM_VERSION_DEV_MINOR}.${ROCM_VERSION_DEV_PATCH}")
-  math(EXPR ROCM_VERSION_DEV_INT "(${ROCM_VERSION_DEV_MAJOR}*10000) + (${ROCM_VERSION_DEV_MINOR}*100) + ${ROCM_VERSION_DEV_PATCH}")
-
-  message("\n***** ROCm version from ${ROCM_HEADER_NAME} ****\n")
-  message("ROCM_VERSION_DEV: ${ROCM_VERSION_DEV}")
-  message("ROCM_VERSION_DEV_MAJOR: ${ROCM_VERSION_DEV_MAJOR}")
-  message("ROCM_VERSION_DEV_MINOR: ${ROCM_VERSION_DEV_MINOR}")
-  message("ROCM_VERSION_DEV_PATCH: ${ROCM_VERSION_DEV_PATCH}")
-  message("ROCM_VERSION_DEV_INT:   ${ROCM_VERSION_DEV_INT}")
-
-  math(EXPR TORCH_HIP_VERSION "(${HIP_VERSION_MAJOR} * 100) + ${HIP_VERSION_MINOR}")
-  message("HIP_VERSION_MAJOR: ${HIP_VERSION_MAJOR}")
-  message("HIP_VERSION_MINOR: ${HIP_VERSION_MINOR}")
-  message("TORCH_HIP_VERSION: ${TORCH_HIP_VERSION}")
-
-  # Find ROCM components using Config mode
-  # These components will be searced for recursively in ${ROCM_PATH}
-  message("\n***** Library versions from cmake find_package *****\n")
-  find_package_and_print_version(amd_comgr REQUIRED)
-  find_package_and_print_version(rocrand REQUIRED)
-  find_package_and_print_version(hiprand REQUIRED)
-  find_package_and_print_version(rocblas REQUIRED)
-  find_package_and_print_version(hipblas REQUIRED)
-  find_package_and_print_version(miopen REQUIRED)
-  find_package_and_print_version(hipfft REQUIRED)
-  find_package_and_print_version(hipsparse REQUIRED)
-  find_package_and_print_version(rocprim REQUIRED)
-  find_package_and_print_version(hipcub REQUIRED)
-  find_package_and_print_version(rocthrust REQUIRED)
-  find_package_and_print_version(hipsolver REQUIRED)
-  find_package_and_print_version(rocsolver REQUIRED)
-  # workaround cmake 4 build issue
   if(CMAKE_VERSION VERSION_GREATER_EQUAL "4.0.0")
     message(WARNING "Work around hiprtc cmake failure for cmake >= 4")
     set(CMAKE_POLICY_VERSION_MINIMUM 3.5)
-    find_package_and_print_version(hiprtc REQUIRED)
+    find_package(hiprtc REQUIRED)
     unset(CMAKE_POLICY_VERSION_MINIMUM)
   else()
-    find_package_and_print_version(hiprtc REQUIRED)
+    find_package(hiprtc REQUIRED)
   endif()
-  find_package_and_print_version(hipblaslt REQUIRED)
-
-  if(UNIX)
-    find_package_and_print_version(rccl)
-    find_package_and_print_version(hsa-runtime64 REQUIRED)
+  message(STATUS "hiprtc version: ${hiprtc_VERSION}")
+
+  if(NOT WIN32)
+    # RCCL is supported on Linux. It is not on Windows
+    find_package(rccl REQUIRED)
+    message(STATUS "rccl version: ${rccl_VERSION}")
+    # The HSA runtime is used on Linux, not Windows.
+    find_package(hsa-runtime64 REQUIRED)
+    message(STATUS "hsa-runtime64 version: ${hsa-runtime64_VERSION}")
   endif()
+  find_package(hipblaslt REQUIRED)
+  message(STATUS "hipblaslt version: ${hipblaslt_VERSION}")
+
+  # Extract ROCM version parts from the hip package version.
+  string(REPLACE "." ";" ROCM_VERSION_PARTS "${hip_VERSION}")
+  list(GET ROCM_VERSION_PARTS 0 ROCM_VERSION_DEV_MAJOR)
+  list(GET ROCM_VERSION_PARTS 1 ROCM_VERSION_DEV_MINOR)
+  list(GET ROCM_VERSION_PARTS 2 ROCM_VERSION_DEV_PATCH)
+  set(ROCM_VERSION "${ROCM_VERSION_DEV_MAJOR}.${ROCM_VERSION_DEV_MINOR}.${ROCM_VERSION_DEV_PATCH}")
+
+  message(STATUS "\n***** ROCm version: ****\n")
+  message(STATUS "  ROCM_VERSION: ${ROCM_VERSION}")
+  message(STATUS "  ROCM_VERSION_DEV_MAJOR: ${ROCM_VERSION_DEV_MAJOR}")
+  message(STATUS "  ROCM_VERSION_DEV_MINOR: ${ROCM_VERSION_DEV_MINOR}")
+  message(STATUS "  ROCM_VERSION_DEV_PATCH: ${ROCM_VERSION_DEV_PATCH}")
+  message(STATUS "  HIP_VERSION_MAJOR: ${ROCM_VERSION_DEV_MAJOR}")
+  message(STATUS "  HIP_VERSION_MINOR: ${ROCM_VERSION_DEV_MINOR}")
 
-  # Optional components.
-  find_package_and_print_version(hipsparselt)  # Will be required when ready.
-
-  list(REMOVE_DUPLICATES ROCM_INCLUDE_DIRS)
-
-  if(UNIX)
-    # roctx is part of roctracer
-    find_library(ROCM_ROCTX_LIB roctx64 HINTS ${ROCM_PATH}/lib)
+  # Create ROCM_VERSION_DEV_INT which is later used as a preprocessor macros
+  set(ROCM_VERSION_DEV "${ROCM_VERSION_DEV_MAJOR}.${ROCM_VERSION_DEV_MINOR}.${ROCM_VERSION_DEV_PATCH}")
+  math(EXPR ROCM_VERSION_DEV_INT "(${ROCM_VERSION_DEV_MAJOR}*10000) + (${ROCM_VERSION_DEV_MINOR}*100) + ${ROCM_VERSION_DEV_PATCH}")
+  math(EXPR TORCH_HIP_VERSION "(${ROCM_VERSION_DEV_MAJOR} * 100) + ${ROCM_VERSION_DEV_MINOR}")
+
+  message(STATUS "  ROCM_VERSION_DEV_INT:   ${ROCM_VERSION_DEV_INT}")
+  message(STATUS "  TORCH_HIP_VERSION: ${TORCH_HIP_VERSION}")
+
+  # Locate the ROCM_ROCTX_LIB that kineto depends on. This is either part of
+  # roctracer (deprecated) and located with find_library(roctx64) or it is
+  # part of rocprofiler-sdk (aka. rocprofiler v3) as the rocprofiler-sdk-tx
+  # library.
+  # TODO: This isn't quite right and needs to mate up with whether kineto
+  # depends on roctracer or rocprofiler-sdk. The coupling here is fragile and
+  # needs to be reworked.
+  if(NOT WIN32)
+    find_package(rocprofiler-sdk-roctx)
+    if(rocprofiler-sdk-roctx_FOUND)
+      message(STATUS "rocprofiler-sdk-roctx version: ${rocprofiler-sdk-roctx_VERSION} found (will use instead of roctracer)")
+      set(ROCM_ROCTX_LIB rocprofiler-sdk-roctx::rocprofiler-sdk-roctx-shared-library)
+    else()
+      find_library(ROCM_ROCTX_LIB roctx64)
+      if(NOT ROCM_ROCTX_LIB)
+        cmake(WARNING "Neither rocprofiler-sdk nor libroctx64.so was found: This may result in errors if components rely on it")
+      endif()
+    endif()
+  endif()
 
-    set(PROJECT_RANDOM_BINARY_DIR "${PROJECT_BINARY_DIR}")
+  # PyTorch makes some use of hip_add_library and friends, which are only
+  # available in the legacy FindHIP.cmake finder module. This is bundled in the
+  # same CMAKE_PREFIX_PATH as is used for the regular packages, but is put in
+  # a different place on Linux vs Windows for reasons that are lost to time:
+  #   Linux: lib/cmake/hip/FindHIP.cmake
+  #   Windows: lib/cmake/FindHIP.cmake
+  # While we could ask the user to provide an explicit CMAKE_MODULE_PATH, we
+  # do some path munging in an attempt to make this legacy hiccup transparent
+  # to most. If this mechanism ever breaks, the fix is to configure explicitly
+  # with CMAKE_MODULE_PATH pointing at the directory in the ROCM SDK that
+  # contains FindHIP.cmake.
+  function(find_rocm_sdk_module_path)
+    set(hip_lib_dir "${hip_LIB_INSTALL_DIR}")
+    foreach(candidate_path "${hip_lib_dir}/cmake" "${hip_lib_dir}/cmake/hip" "${hip_lib_dir}/../cmake")
+      if(EXISTS "${candidate_path}/FindHIP.cmake")
+        list(PREPEND CMAKE_MODULE_PATH "${candidate_path}")
+        message(STATUS "Legacy FindHIP.cmake module found in ${candidate_path}")
+        set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" PARENT_SCOPE)
+        return()
+      endif()
+    endforeach()
 
-    if(ROCM_VERSION_DEV VERSION_GREATER_EQUAL "5.7.0")
-      # check whether hipblaslt provides HIPBLASLT_MATMUL_MATRIX_SCALE_OUTER_VEC_32F
-      set(file "${PROJECT_BINARY_DIR}/hipblaslt_test_outer_vec.cc")
-      file(WRITE ${file} ""
-        "#define LEGACY_HIPBLAS_DIRECT\n"
-        "#include <hipblaslt/hipblaslt.h>\n"
-        "int main() {\n"
-        "    hipblasLtMatmulMatrixScale_t attr = HIPBLASLT_MATMUL_MATRIX_SCALE_OUTER_VEC_32F;\n"
-        "    return 0;\n"
-        "}\n"
-        )
-      try_compile(hipblaslt_compile_result_outer_vec ${PROJECT_RANDOM_BINARY_DIR} ${file}
-        CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${ROCM_INCLUDE_DIRS}"
-        COMPILE_DEFINITIONS -D__HIP_PLATFORM_AMD__ -D__HIP_PLATFORM_HCC__
-        OUTPUT_VARIABLE hipblaslt_compile_output_outer_vec)
+    message(STATUS "Could not locate legacy FindHIP.cmake: You may need to set CMAKE_MODULE_PATH explicitly to its location")
+  endfunction()
+  find_rocm_sdk_module_path()
+  find_package(HIP MODULE REQUIRED)
 
-      # check whether hipblaslt provides HIPBLASLT_MATMUL_DESC_A_SCALE_POINTER_VEC_EXT
-      set(file "${PROJECT_BINARY_DIR}/hipblaslt_test_vec_ext.cc")
-      file(WRITE ${file} ""
-        "#define LEGACY_HIPBLAS_DIRECT\n"
-        "#include <hipblaslt/hipblaslt.h>\n"
-        "int main() {\n"
-        "    hipblasLtMatmulDescAttributes_t attr = HIPBLASLT_MATMUL_DESC_A_SCALE_POINTER_VEC_EXT;\n"
-        "    return 0;\n"
-        "}\n"
-        )
-      try_compile(hipblaslt_compile_result_vec_ext ${PROJECT_RANDOM_BINARY_DIR} ${file}
-        CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${ROCM_INCLUDE_DIRS}"
-        COMPILE_DEFINITIONS -D__HIP_PLATFORM_AMD__ -D__HIP_PLATFORM_HCC__
-        OUTPUT_VARIABLE hipblaslt_compile_output_vec_ext)
+  set(HIP_NEW_TYPE_ENUMS ON)
+  set(PYTORCH_FOUND_HIP ON)
+endmacro()
 
-      if(hipblaslt_compile_result_outer_vec)
-        set(HIPBLASLT_OUTER_VEC ON)
-        set(HIPBLASLT_VEC_EXT OFF)
-        message("hipblaslt is using scale pointer outer vec")
-      elseif(hipblaslt_compile_result_vec_ext)
-        set(HIPBLASLT_OUTER_VEC OFF)
-        set(HIPBLASLT_VEC_EXT ON)
-        message("hipblaslt is using scale pointer vec ext")
-      else()
-        set(HIPBLASLT_OUTER_VEC OFF)
-        set(HIPBLASLT_VEC_EXT OFF)
-        message("hipblaslt is NOT using scale pointer outer vec: ${hipblaslt_compile_output_outer_vec}")
-        message("hipblaslt is NOT using scale pointer vec ext: ${hipblaslt_compile_output_vec_ext}")
-      endif()
-    endif()
+message(STATUS "___ROCM")
+set(PYTORCH_FOUND_HIP FALSE)
+set(HIP_PLATFORM "amd")
+find_package(hip CONFIG)
+if(hip_FOUND)
+  # Apparently, aotriton compilation breaks if PYTORCH_ROCM_ARCH isn't converted to a list here.
+  torch_hip_get_arch_list(PYTORCH_ROCM_ARCH)
+  if(PYTORCH_ROCM_ARCH STREQUAL "")
+    message(FATAL_ERROR "No GPU arch specified for ROCm build. Please use PYTORCH_ROCM_ARCH environment variable to specify GPU archs to build for.")
   endif()
+  message("Building PyTorch for GPU arch: ${PYTORCH_ROCM_ARCH}")
+  pytorch_load_hip()
 endif()
-- 
2.47.1.windows.2

