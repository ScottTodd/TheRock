From af7f102622add278151c0dd15d88473cb674481c Mon Sep 17 00:00:00 2001
From: Aaryaman Vasishta <jem456.vasishta@gmail.com>
Date: Sun, 4 May 2025 22:24:50 +0530
Subject: [PATCH 12/12] [ROCm][Windows] Fixes for compilation on Windows using
 clang-cl

---
 CMakeLists.txt               |  8 ++++++--
 aten/src/ATen/CMakeLists.txt | 12 ++++++------
 c10/hip/CMakeLists.txt       |  6 +++++-
 c10/hip/HIPFunctions.h       |  5 +++++
 caffe2/CMakeLists.txt        | 10 +++++++++-
 cmake/Dependencies.cmake     |  8 +++++---
 cmake/public/LoadHIP.cmake   | 33 +++++++++++++++++++--------------
 functorch/csrc/dim/arena.h   |  2 +-
 8 files changed, 56 insertions(+), 28 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f3fee2f7ff..b487784d54 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -248,7 +248,7 @@ option(USE_XPU "Use XPU" ON)
 cmake_dependent_option(
   BUILD_LAZY_CUDA_LINALG "Build cuda linalg ops as separate library" ON
   "USE_CUDA AND LINUX AND BUILD_PYTHON" OFF)
-cmake_dependent_option(USE_ROCM "Use ROCm" ON "LINUX" OFF)
+cmake_dependent_option(USE_ROCM "Use ROCm" ON "LINUX OR WIN32" OFF)
 option(CAFFE2_STATIC_LINK_CUDA "Statically link CUDA libraries" OFF)
 cmake_dependent_option(USE_CUDNN "Use cuDNN" ON "USE_CUDA" OFF)
 cmake_dependent_option(USE_STATIC_CUDNN "Use cuDNN static libraries" OFF
@@ -271,7 +271,7 @@ option(USE_NATIVE_ARCH "Use -march=native" OFF)
 cmake_dependent_option(USE_MPS "Use MPS for macOS build" ON "MPS_FOUND" OFF)
 cmake_dependent_option(USE_NCCL "Use NCCL" ON
                        "USE_CUDA OR USE_ROCM;UNIX;NOT APPLE" OFF)
-cmake_dependent_option(USE_RCCL "Use RCCL" ON USE_NCCL OFF)
+cmake_dependent_option(USE_RCCL "Use RCCL" ON "USE_NCCL;NOT WIN32" OFF)
 cmake_dependent_option(USE_STATIC_NCCL "Use static NCCL" OFF "USE_NCCL" OFF)
 cmake_dependent_option(USE_SYSTEM_NCCL "Use system-wide NCCL" OFF "USE_NCCL"
                        OFF)
@@ -891,6 +891,10 @@ if(USE_ROCM)
   if(UNIX AND (USE_FLASH_ATTENTION OR USE_MEM_EFF_ATTENTION))
     include(cmake/External/aotriton.cmake)
   endif()
+  if(WIN32)
+    string(APPEND CMAKE_CXX_FLAGS " -Wno-ignored-attributes -Wno-unknown-attributes")
+    string(APPEND CMAKE_CXX_FLAGS " -fms-extensions -fms-compatibility -D__HIP_ROCclr__=1")
+  endif()
 endif()
 
 if(DEBUG_CUDA)
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index 74e464dda4..8d28717992 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -382,12 +382,12 @@ endif()
     ${native_quantized_hip_hip}
     ${native_transformers_hip_hip} ${native_transformers_src_hip_hip}
   )
-  if(WIN32) # Windows doesn't support Composable Kernels
-    file(GLOB native_hip_bgemm "native/hip/bgemm_kernels/*.hip")
-    file(GLOB native_hip_ck "native/hip/ck*.hip")
-    exclude(ATen_HIP_SRCS "${ATen_HIP_SRCS}"
-      ${native_hip_bgemm} ${native_hip_ck})
-  endif()
+  # if(WIN32) # Windows doesn't support Composable Kernels
+  #   file(GLOB native_hip_bgemm "native/hip/bgemm_kernels/*.hip")
+  #   file(GLOB native_hip_ck "native/hip/ck*.hip")
+  #   exclude(ATen_HIP_SRCS "${ATen_HIP_SRCS}"
+  #     ${native_hip_bgemm} ${native_hip_ck})
+  # endif()
   # TODO: Codegen separate files for HIP and use those (s/cuda_generated_sources/hip_generated_sources)
   list(APPEND all_hip_cpp
     ${native_nested_hip_cpp}
diff --git a/c10/hip/CMakeLists.txt b/c10/hip/CMakeLists.txt
index a98ec6fa23..b0510797f4 100644
--- a/c10/hip/CMakeLists.txt
+++ b/c10/hip/CMakeLists.txt
@@ -48,7 +48,11 @@ if(NOT BUILD_LIBTORCHLESS)
   endif()
 
   # ---[ Dependency of c10_hip
-  target_link_libraries(c10_hip PUBLIC ${C10_LIB} hip::amdhip64 hsa-runtime64::hsa-runtime64)
+  if(NOT WIN32)
+    target_link_libraries(c10_hip PUBLIC ${C10_LIB} hip::amdhip64 hsa-runtime64::hsa-runtime64)
+  else()
+    target_link_libraries(c10_hip PUBLIC ${C10_LIB} hip::amdhip64)
+  endif()
 
   target_include_directories(
       c10_hip PUBLIC
diff --git a/c10/hip/HIPFunctions.h b/c10/hip/HIPFunctions.h
index 97a8657550..fdca74bbf7 100644
--- a/c10/hip/HIPFunctions.h
+++ b/c10/hip/HIPFunctions.h
@@ -69,6 +69,11 @@ class WarningState {
   SyncDebugMode sync_debug_mode = SyncDebugMode::L_DISABLED;
 };
 
+
+#ifdef _MSC_VER
+#define __inline__ __inline
+#endif
+
 C10_HIP_API __inline__ WarningState& warning_state() {
   static WarningState warning_state_;
   return warning_state_;
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index b32c71c8bd..916bc827e6 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -775,7 +775,7 @@ else()
   set(TORCH_HIP_LIB torch_hip)
   set(TORCH_XPU_LIB torch_xpu)
 endif()
-
+ 
 
 if(NOT BUILD_LIBTORCHLESS)
 add_library(torch_cpu ${Caffe2_CPU_SRCS})
@@ -932,6 +932,10 @@ if(USE_ROCM)
     target_compile_definitions(torch_hip PRIVATE USE_NCCL)
   endif()
 
+  if(WIN32)
+    target_link_options(torch_hip PRIVATE "-fuse-ld=lld")
+  endif()
+
   if(USE_PRECOMPILED_HEADERS)
     target_precompile_headers(torch_hip PRIVATE
         "$<$<COMPILE_LANGUAGE:CXX>:ATen/core/ATen_pch.h>")
@@ -1699,6 +1703,10 @@ if(USE_ROCM)
     endforeach()
   endif()
 
+  if(WIN32)
+    list(APPEND HIP_CXX_FLAGS "-fms-extensions")
+  endif()
+
   # Call again since Caffe2_HIP_INCLUDE is extended with ATen include dirs.
   hip_include_directories(${Caffe2_HIP_INCLUDE})
 
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index be45936a8e..27fab45612 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1052,9 +1052,11 @@ if(USE_ROCM)
     list(APPEND HIP_CXX_FLAGS -D__HIP_NO_HALF_OPERATORS__=1)
     list(APPEND HIP_CXX_FLAGS -D__HIP_NO_HALF_CONVERSIONS__=1)
     list(APPEND HIP_CXX_FLAGS -DTORCH_HIP_VERSION=${TORCH_HIP_VERSION})
-    list(APPEND HIP_CXX_FLAGS -Wno-shift-count-negative)
-    list(APPEND HIP_CXX_FLAGS -Wno-shift-count-overflow)
-    list(APPEND HIP_CXX_FLAGS -Wno-duplicate-decl-specifier)
+    if(NOT WIN32)
+      list(APPEND HIP_CXX_FLAGS -Wno-shift-count-negative)
+      list(APPEND HIP_CXX_FLAGS -Wno-shift-count-overflow)
+      list(APPEND HIP_CXX_FLAGS -Wno-duplicate-decl-specifier)
+    endif()
     list(APPEND HIP_CXX_FLAGS -DCAFFE2_USE_MIOPEN)
     list(APPEND HIP_CXX_FLAGS -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_HIP)
     list(APPEND HIP_CXX_FLAGS -std=c++17)
diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index 7b058199a1..5eadfd5168 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -37,10 +37,12 @@ macro(pytorch_load_hip)
   message(STATUS "hiprtc version: ${hiprtc_VERSION}")
 
   # Original version made these UNIX-only.
-  find_package(rccl REQUIRED)
-  message(STATUS "rccl version: ${rccl_VERSION}")
-  find_package(hsa-runtime64 REQUIRED)
-  message(STATUS "hsa-runtime64 version: ${hsa-runtime64_VERSION}")
+  if(NOT WIN32)
+    find_package(rccl REQUIRED)
+    message(STATUS "rccl version: ${rccl_VERSION}")
+    find_package(hsa-runtime64 REQUIRED)
+    message(STATUS "hsa-runtime64 version: ${hsa-runtime64_VERSION}")
+  endif()
   find_package(hipblaslt REQUIRED)
   message(STATUS "hipblaslt version: ${hipblaslt_VERSION}")
 
@@ -74,14 +76,16 @@ macro(pytorch_load_hip)
   # TODO: This isn't quite right and needs to mate up with whether kineto
   # depends on roctracer or rocprofiler-sdk. The coupling here is fragile and
   # needs to be reworked.
-  find_package(rocprofiler-sdk-roctx)
-  if(rocprofiler-sdk-roctx_FOUND)
-    message(STATUS "rocprofiler-sdk-roctx version: ${rocprofiler-sdk-roctx_VERSION} found (will use instead of roctracer)")
-    set(ROCM_ROCTX_LIB rocprofiler-sdk-roctx::rocprofiler-sdk-roctx-shared-library)
-  else()
-    find_library(ROCM_ROCTX_LIB roctx64)
-    if(NOT ROCM_ROCTX_LIB)
-      cmake(WARNING "Neither rocprofiler-sdk nor libroctx64.so was found: This may result in errors if components rely on it")
+  if(NOT WIN32)
+    find_package(rocprofiler-sdk-roctx)
+    if(rocprofiler-sdk-roctx_FOUND)
+      message(STATUS "rocprofiler-sdk-roctx version: ${rocprofiler-sdk-roctx_VERSION} found (will use instead of roctracer)")
+      set(ROCM_ROCTX_LIB rocprofiler-sdk-roctx::rocprofiler-sdk-roctx-shared-library)
+    else()
+      find_library(ROCM_ROCTX_LIB roctx64)
+      if(NOT ROCM_ROCTX_LIB)
+        cmake(WARNING "Neither rocprofiler-sdk nor libroctx64.so was found: This may result in errors if components rely on it")
+      endif()
     endif()
   endif()
 
@@ -96,9 +100,10 @@ macro(pytorch_load_hip)
   # to most. If this mechanism ever breaks, the fix is to configure explicitly
   # with CMAKE_MODULE_PATH pointing at the directory in the ROCM SDK that
   # contains FindHIP.cmake.
+  
   function(find_rocm_sdk_module_path)
     set(hip_lib_dir "${hip_LIB_INSTALL_DIR}")
-    foreach(candidate_path "${hip_lib_dir}/cmake" "${hip_lib_dir}/cmake/hip")
+    foreach(candidate_path "${hip_lib_dir}/cmake" "${hip_lib_dir}/cmake/hip" "${hip_lib_dir}/../cmake")
       if(EXISTS "${candidate_path}/FindHIP.cmake")
         list(PREPEND CMAKE_MODULE_PATH "${candidate_path}")
         message(STATUS "Legacy FindHIP.cmake module found in ${candidate_path}")
@@ -110,7 +115,7 @@ macro(pytorch_load_hip)
     message(STATUS "Could not locate legacy FindHIP.cmake: You may need to set CMAKE_MODULE_PATH explicitly to its location")
   endfunction()
   find_rocm_sdk_module_path()
-  find_package(HIP 1.0 MODULE REQUIRED)
+  find_package(HIP MODULE REQUIRED)
 
   set(HIP_NEW_TYPE_ENUMS ON)
   set(PYTORCH_FOUND_HIP ON)
diff --git a/functorch/csrc/dim/arena.h b/functorch/csrc/dim/arena.h
index aaaf7e772a..4bc627575d 100644
--- a/functorch/csrc/dim/arena.h
+++ b/functorch/csrc/dim/arena.h
@@ -8,7 +8,7 @@
 #include <ATen/ATen.h>
 #include "minpybind.h"
 
-#ifdef _WIN32
+#if defined(_WIN32) && !(defined(__clang__) && defined(_MSC_VER))
 #include <intrin.h>
 // https://stackoverflow.com/questions/355967/how-to-use-msvc-intrinsics-to-get-the-equivalent-of-this-gcc-code
 inline unsigned int __builtin_clz(unsigned int x) {
-- 
2.49.0.windows.1

